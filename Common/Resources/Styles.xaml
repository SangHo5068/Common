<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:converter="clr-namespace:Common.Converters"
                    xmlns:command="clr-namespace:Common.Command"
                    xmlns:ctrl="clr-namespace:Common.Controls"
                    xmlns:util="clr-namespace:Common.Utilities"
                    xmlns:view="clr-namespace:Common.Views">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Common;component/Controls/ProgressRing.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--#region Converter-->
    <converter:BooleanToVisibilityInvertConverter   x:Key="BooleanToVisibilityInvertConverter"/>
    <converter:BooleanToVisibilityConverter         x:Key="BooleanToVisibilityConverter"/>
    <converter:BooleanToVisibilityConverter         x:Key="BoolToVisibilityConverter"/>
    <converter:BooleanToReverseConverter            x:Key="BooleanToReverseConverter"/>
    <converter:ContainsToBooleanConverter           x:Key="ContainsToBooleanConverter"/>
    <converter:ContainsToBooleanReverseConverter    x:Key="ContainsToBooleanReverseConverter"/>
    <converter:EnumToBooleanConverter               x:Key="EnumToBooleanConverter" />
    <converter:EnumToBooleanReverseConverter        x:Key="EnumToBooleanReverseConverter" />
    <converter:EnumToVisibleConverter               x:Key="EnumToVisibleConverter"/>
    <converter:EnumToCollapsedConverter             x:Key="EnumToCollapsedConverter"/>
    <converter:EnumToDisplayConverter               x:Key="EnumToDisplayConverter"/>
    <converter:EnumToDescriptionConverter           x:Key="EnumToDescriptionConverter"/>
    <converter:HeightConverter                      x:Key="HeightConverter"/>
    <converter:NullToUnsetValueConverter            x:Key="NullToUnsetValueConverter"/>
    <converter:NullToBooleanConverter               x:Key="NullToBooleanConverter"/>
    <converter:ObjectNullToVisibilityConverter      x:Key="ObjectNullToVisibilityConverter"/>
    <converter:StringEmptyToVisibilityConverter     x:Key="StringEmptyToVisibilityConverter"/>
    <converter:StringToImageConverter               x:Key="StringToImageConverter"/>
    <converter:StringToDoubleConverter              x:Key="StringToDoubleConverter"/>
    <converter:SubtractionConverter                 x:Key="SubtractionConverter"/>
    <converter:TextInputToVisibilityConverter       x:Key="TextInputToVisibilityConverter"/>
    <converter:WidthConverter                       x:Key="WidthConverter"/>
    <converter:WaitingMessageConverter              x:Key="WaitingMessageConverter"/>
    <converter:ZeroToCollapsedConverter             x:Key="ZeroToCollapsedConverter" />
    <!--#endregion //Converter-->

    <Geometry x:Key="NumericUpArrowGeometry">M 0,3 C0,3 0,4 0,4 0,4 3,4 3,4 3,4 3,3 3,3 3,3 4,3 4,3 4,3 4,4 4,4 4,4 7,4 7,4 7,4 7,3 7,3 7,3 6,3 6,3 6,3 6,2 6,2 6,2 5,2 5,2 5,2 5,1 5,1 5,1 4,1 4,1 4,1 4,0 4,0 4,0 3,0 3,0 3,0 3,1 3,1 3,1 2,1 2,1 2,1 2,2 2,2 2,2 1,2 1,2 1,2 1,3 1,3 1,3 0,3 0,3 z</Geometry>
    <Geometry x:Key="NumericDownArrowGeometry">M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z</Geometry>

    <Geometry x:Key="Checkmark">M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z</Geometry>
    <Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>

    <!--#region FocusVisual-->
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TabItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Stroke="White" StrokeDashArray="1 2" StrokeThickness="1" Margin="3,3,3,1" SnapsToDevicePixels="true"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TextBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="5" SnapsToDevicePixels="true" UseLayoutRounding="True" Stretch="Fill" Stroke="{DynamicResource Brush.Red}" StrokeThickness="2" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SideTreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle SnapsToDevicePixels="true" Margin="3" Stroke="White" StrokeDashArray="1 2" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion //FocusVisual-->

    <!--#region WindowStyle-->
    <Style TargetType="Window" x:Key="StartAppWindowStyle">
        <Setter Property="Background" Value="{DynamicResource Background_Window}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_WindowBorder}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="5">
                        <ContentPresenter x:Name="WindowContent" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Window" x:Key="MainWindowStyle">
        <Setter Property="Background" Value="{DynamicResource Background_MainBorder}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            CornerRadius="6">
                        <Grid>
                            <AdornerDecorator>
                                <ContentPresenter x:Name="WindowContent" />
                            </AdornerDecorator>
                            <ResizeGrip x:Name="WindowResizeGrip" VerticalAlignment="Bottom" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                                <Condition Property="WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Window" x:Key="PopupWindowStyle">
        <Setter Property="Background" Value="{DynamicResource Brush.White}" />
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="2" Background="{TemplateBinding Background}"
                            CornerRadius="5">
                        <Grid>
                            <AdornerDecorator>
                                <ContentPresenter x:Name="WindowContent"/>
                            </AdornerDecorator>
                            <ResizeGrip x:Name="WindowResizeGrip" VerticalAlignment="Bottom" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="NoResize" />
                                <Condition Property="WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion WindowStyle-->

    <!--#region Borders-->
    <Style TargetType="ctrl:BorderContentHeader">
        <Setter Property="Background" Value="{DynamicResource Background_Main}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:BorderContentHeader}">
                    <Border CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid Margin="5">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding Content}"/>
                            <ctrl:RightPanel Grid.Column="1">
                                <ctrl:WindowMinButton Margin="0,0,5,0" Command="{Binding CommandWindowMin, RelativeSource={RelativeSource AncestorType=view:BaseWindow}}" CommandParameter="Minimized" Visibility="{TemplateBinding IsShowMin}"/>
                                <ctrl:WindowMaxButton Margin="2,0,2,0" Command="{Binding CommandWindowMax, RelativeSource={RelativeSource AncestorType=view:BaseWindow}}" CommandParameter="Maximized" Visibility="{TemplateBinding IsShowMax}"/>
                                <ctrl:WindowCloseButton Margin="0,0,0,0" Command="{Binding CommandWindowClose, RelativeSource={RelativeSource AncestorType=view:BaseWindow}}"/>
                            </ctrl:RightPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:BorderMainHeader">
        <Setter Property="Background" Value="{DynamicResource Background_MainBorder}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:BorderMainHeader}">
                    <Border CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonDown">
                                <command:EventToCommand PassEventArgsToCommand="True"
                                                        Command="{Binding CommandMouseLeftDoubleClick, RelativeSource={RelativeSource AncestorType=view:BaseWindow}}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>

                        <Grid Margin="5">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Image Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Center"
                                   Margin="10 0 0 0"
                                   Visibility="{Binding Image, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ObjectNullToVisibilityConverter}}"
                                   Width="{TemplateBinding ImageWidth}" Height="{TemplateBinding ImageHeight}"
                                   Source="{TemplateBinding Image}" />

                            <ctrl:TextBlockMainHeader Grid.Column="1" Margin="20,0,5,5" Text="{TemplateBinding Header}" />

                            <ctrl:RightPanel Grid.Column="2">
                                <!--<ctrl:WindowMinButton Margin="0,0,5,0" Command="{Binding CommandWindowMin, RelativeSource={RelativeSource AncestorType=view:BaseWindow}}" CommandParameter="Minimized" Visibility="{TemplateBinding IsShowMin}"/>
                                <ctrl:WindowMaxButton Margin="2,0,2,0" Command="{Binding CommandWindowMax, RelativeSource={RelativeSource AncestorType=view:BaseWindow}}" CommandParameter="Maximized" Visibility="{TemplateBinding IsShowMax}"/>
                                <ctrl:WindowCloseButton Margin="0,0,0,0" Command="{Binding CommandWindowClose, RelativeSource={RelativeSource AncestorType=view:BaseWindow}}"/>-->
                                <!--<ctrl:WindowCloseButton Margin="0,0,0,0" Command="{TemplateBinding CloseCommand}"/>-->
                                <ctrl:LogoutButton Margin="0,0,0,0" Command="{TemplateBinding CommandLogout}" Visibility="{TemplateBinding IsShowLogout}" Height="40" Width="40" HorizontalAlignment="Right" VerticalAlignment="Center" ToolTip="Logout"/>
                                <ctrl:WindowMinButton Margin="0,0,5,0" Command="{TemplateBinding CommandWindowMin}" CommandParameter="Minimized" Visibility="{TemplateBinding IsShowMin}"/>
                                <ctrl:WindowMaxButton Margin="2,0,2,0" Command="{TemplateBinding CommandWindowMax}" CommandParameter="Maximized" Visibility="{TemplateBinding IsShowMax}"/>
                                <ctrl:WindowCloseButton Margin="0,0,0,0" Command="{TemplateBinding CloseCommand}"/>
                            </ctrl:RightPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:MainHeader">
        <Setter Property="Background" Value="{DynamicResource Background_Main}" />
        <Setter Property="Foreground" Value="{DynamicResource Brush.White}" />
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:MainHeader}">
                    <Border CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonDown">
                                <command:EventToCommand Command="{Binding CommandMouseLeftDoubleClick, RelativeSource={RelativeSource AncestorType=view:BaseWindow}}" PassEventArgsToCommand="True"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>

                            <!-- Rounded mask (stretches to fill Grid) -->
                            <Border Name="mask" Background="{TemplateBinding Background}" CornerRadius="5 0 0 0"/>
                            <!-- Main Icon content container -->
                            <StackPanel Margin="0">
                                <!-- Use a VisualBrush of 'mask' as the opacity mask -->
                                <StackPanel.OpacityMask>
                                    <VisualBrush Visual="{Binding ElementName=mask}"/>
                                </StackPanel.OpacityMask>
                                <!-- Any content -->
                                <Image Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Center"
                                       Visibility="{Binding Image, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ObjectNullToVisibilityConverter}}"
                                       Width="{TemplateBinding ImageWidth}" Height="{TemplateBinding ImageHeight}"
                                       Source="{TemplateBinding Image}" />
                            </StackPanel>

                            <ctrl:TextBlockMainHeader Grid.Column="1" Margin="20,0,5,5" Text="{TemplateBinding Header}" />

                            <ctrl:RightPanel Grid.Column="2" Margin="0" VerticalAlignment="Top">
                                <ctrl:WindowMinButton Margin="0 3 5 0" Command="{Binding CommandWindowMin, RelativeSource={RelativeSource AncestorType=view:BaseWindow}}" CommandParameter="Minimized" Visibility="{TemplateBinding IsShowMin}"/>
                                <ctrl:WindowMaxButton Margin="2 3 2 0" Command="{Binding CommandWindowMax, RelativeSource={RelativeSource AncestorType=view:BaseWindow}}" CommandParameter="Maximized" Visibility="{TemplateBinding IsShowMax}"/>
                                <!--<ctrl:WindowCloseButton Margin="0,0,0,0" Command="{Binding CommandWindowClose, RelativeSource={RelativeSource AncestorType=view:BaseWindow}}"/>-->
                                <ctrl:WindowCloseButton Margin="0 -3 0 0" Width="40" VerticalAlignment="Stretch" Command="{TemplateBinding CloseCommand}"
                                                        Style="{DynamicResource CloseButtonStyle}"/>
                            </ctrl:RightPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:BorderMainFooter">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:BorderMainFooter}">
                    <Border CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid Margin="5">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>

                            <Image Width="24" Height="24" Stretch="Fill"
                                   Visibility="{Binding Image, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ObjectNullToVisibilityConverter}}"
                                   Source="{TemplateBinding Image}" />
                            <ContentPresenter Grid.Column="1" Content="{TemplateBinding Content}"
                                              HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:StrokeBorder">
        <Setter Property="BorderBrush">
            <Setter.Value>
                <VisualBrush>
                    <VisualBrush.Visual>
                        <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                   Fill="{Binding Path=Fill, RelativeSource={RelativeSource AncestorType=ctrl:StrokeBorder}}"
                                   Stroke="{Binding Path=Stroke, RelativeSource={RelativeSource AncestorType=ctrl:StrokeBorder}}"
                                   StrokeDashArray="{Binding Path=StrokeDashArray, RelativeSource={RelativeSource AncestorType=ctrl:StrokeBorder}}"
                                   StrokeThickness="{Binding Path=StrokeThickness, RelativeSource={RelativeSource AncestorType=ctrl:StrokeBorder}}"
                                   Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Border}}}"
                                   Height="{Binding Path=ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type Border}}}"/>
                    </VisualBrush.Visual>
                </VisualBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion //Borders-->

    <!--#region Button-->
    <Style TargetType="Button">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="Button" x:Key="BaseButtonStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <Style TargetType="Button" x:Key="ButtonWindowStyle" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Background_WindowButton}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="24"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="brd" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" SnapsToDevicePixels="True"
                          Background="Transparent">
                        <ContentPresenter x:Name="cp" IsHitTestVisible="False" Focusable="False"
                                          VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                          Content="{TemplateBinding Content}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true"/>
                        <Trigger Property="IsPressed" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="Button" x:Key="ButtonStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Margin" Value="5,2"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="MinWidth" Value="80"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>
    
    <Style TargetType="ctrl:CommonButton" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Background" Value="{DynamicResource Background_CommonButton}" />
        <Setter Property="Foreground" Value="{DynamicResource Brush.White}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="85"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:CommonButton" BasedOn="{StaticResource BaseButtonStyle}" x:Key="BaseCommonButtonStyle">
        <Setter Property="Background" Value="{DynamicResource Background_CommonButton}" />
        <Setter Property="Foreground" Value="{DynamicResource Brush.White}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="85"/>
        <Setter Property="Height" Value="28"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:PopupCommonButton" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Background" Value="{DynamicResource Background_PopupButtonCommon}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_PopupButtonCommon}"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.White}"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="MinWidth" Value="50"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:PopupCommonButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" BorderThickness="1" CornerRadius="2">
                        <Border CornerRadius="1" BorderBrush="{DynamicResource Brush_PopupCommonInner}" BorderThickness="0,1,0,0">
                            <ContentPresenter x:Name="contentPresenter" Margin="8,0,8,1" Focusable="False" RecognizesAccessKey="True"
                                              ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Background_PopupButtonOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Background_PopupButtonPress}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.8"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="ctrl:WindowMinButton" BasedOn="{StaticResource ButtonWindowStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="xBorder" Background="Transparent">
                        <Path Fill="{TemplateBinding Foreground}">
                            <Path.Data>
                                <!--<PathGeometry Figures="m 9.999999 16.999962 c 0 0 9.999962 0 9.999962 0 0 0 0 2.000006 0 2.000006 0 0 -9.999962 0 -9.999962 0 0 0 0 -2.000006 0 -2.000006 z" FillRule="NonZero" />-->
                                <PathGeometry Figures="M20,14H4V10H20" FillRule="NonZero" />
                            </Path.Data>
                        </Path>
                    </Border>
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="xBorder" Property="Background" Value="LightPink"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:WindowMaxButton" BasedOn="{StaticResource ButtonWindowStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="xBorder" Background="Transparent">
                        <Path x:Name="xPath" Fill="{TemplateBinding Foreground}">
                            <Path.Data>
                                <!--<PathGeometry Figures="m 19.999924 9.999942 c 0 0 -9.999962 0 -9.999962 0 0 0 0 10.000026 0 10.000026 0 0 9.999962 0 9.999962 0 0 0 0 -10.000026 0 -10.000026 z m -0.999985 3.00004 c 0 0 0 6.000016 0 6.000016 0 0 -7.999992 0 -7.999992 0 0 0 0 -6.000016 0 -6.000016 0 0 7.999992 0 7.999992 0 z" FillRule="EvenOdd" />-->
                                <PathGeometry Figures="M4,4H20V20H4V4M6,8V18H18V8H6Z" FillRule="NonZero" />
                            </Path.Data>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="xBorder" Property="Background" Value="LightPink"/>
                        </Trigger>-->
                        <!--<DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" Value="Maximized">-->
                        <DataTrigger Binding="{Binding Path=(util:WindowStateHelper.IsMaximized), UpdateSourceTrigger=PropertyChanged}" Value="True">
                            <Setter TargetName="xPath" Property="Data">
                                <Setter.Value>
                                    <!--<PathGeometry Figures="m 9.999999 19.999999 c 0 0 0 -9.5 0 -9.5 0 0 -1 0 -1 0 0 0 0 10.500001 0 10.500001 0 0 10.5 0 10.5 0 0 0 0 -1.000001 0 -1.000001 0 0 -9.5 0 -9.5 0 z M 21 8.999999 c 0 0 -10 0 -10 0 0 0 0 10.000001 0 10.000001 0 0 10 0 10 0 0 0 0 -10.000001 0 -10.000001 z m -1.000001 3 c 0 0 0 6 0 6 0 0 -8 0 -8 0 0 0 0 -6 0 -6 0 0 8 0 8 0 z" FillRule="EvenOdd" />-->
                                    <PathGeometry Figures="M4,8H8V4H20V16H16V20H4V8M16,8V14H18V6H10V8H16M6,12V18H14V12H6Z" FillRule="NonZero" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:WindowCloseButton" BasedOn="{StaticResource ButtonWindowStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="xBorder" Background="Transparent">
                        <Path Fill="{TemplateBinding Foreground}">
                            <Path.Data>
                                <!--<PathGeometry Figures="m 20.000499 11.374249 c 0 0 -1.376 -1.375001 -1.376 -1.375001 0 0 -3.625 3.625001 -3.625 3.625001 0 0 -3.625 -3.625001 -3.625 -3.625001 0 0 -1.375 1.375001 -1.375 1.375001 0 0 3.625 3.625501 3.625 3.625501 0 0 -3.625 3.625 -3.625 3.625 0 0 1.375 1.376 1.375 1.376 0 0 3.625 -3.625501 3.625 -3.625501 0 0 3.625 3.625501 3.625 3.625501 0 0 1.376 -1.376 1.376 -1.376 0 0 -3.625 -3.625 -3.625 -3.625 0 0 3.625 -3.625501 3.625 -3.625501 z" FillRule="NonZero" />-->
                                <PathGeometry Figures="M20 6.91L17.09 4L12 9.09L6.91 4L4 6.91L9.09 12L4 17.09L6.91 20L12 14.91L17.09 20L20 17.09L14.91 12L20 6.91Z" FillRule="EvenOdd" />
                            </Path.Data>
                        </Path>
                    </Border>
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="xBorder" Property="Background" Value="LightPink"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ctrl:IconButton">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{DynamicResource Background_SearchButton}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_SearchButtonOuter}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground_SearchText}"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="MinWidth" Value="25"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:IconButton}">
                    <Border x:Name="border" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="1" SnapsToDevicePixels="True" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Border x:Name="Inner" CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource Brush_SearchButtonInner}">
                            <ctrl:HorizonPanel Margin="5,0" HorizontalAlignment="Center">
                                <Image Stretch="Fill" Width="{TemplateBinding IconWidth}" Height="{TemplateBinding IconHeight}"
                                       Source="{TemplateBinding Icon}"/>
                                <ContentPresenter x:Name="contentPresenter" Margin="3,0,0,0" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </ctrl:HorizonPanel>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background"  TargetName="border" Value="{DynamicResource Background_SearchButtonOver}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Brush_SearchButtonOuterOver}"/>
                            <Setter Property="BorderBrush" TargetName="Inner" Value="{DynamicResource Brush_SearchButtonInnerOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background"  TargetName="border" Value="{DynamicResource Background_SearchButtonOver}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Brush_SearchButtonOuterOver}"/>
                            <Setter Property="Margin"      TargetName="Inner" Value="1 1 0 0"/>
                            <Setter Property="BorderBrush" TargetName="Inner" Value="{DynamicResource Brush_SearchButtonInnerOver}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.8"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ctrl:LogoutButton">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground_Logout}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:LogoutButton}">
                    <ControlTemplate.Resources>
                        <Style TargetType="Image">
                            <Setter Property="Width" Value="20" />
                            <Setter Property="Height" Value="20" />
                            <Setter Property="Stretch" Value="UniformToFill" />
                            <Setter Property="HorizontalAlignment" Value="Center" />
                            <Setter Property="VerticalAlignment" Value="Center" />
                        </Style>
                        <Style TargetType="TextBlock">
                            <Setter Property="Margin" Value="2,0,0,0" />
                            <Setter Property="Foreground" Value="{DynamicResource Foreground_Logout}" />
                            <Setter Property="FontFamily" Value="{DynamicResource AppFont}" />
                            <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}" />
                            <Setter Property="FontWeight" Value="Bold" />
                            <Setter Property="HorizontalAlignment" Value="Stretch" />
                            <Setter Property="VerticalAlignment" Value="Center" />
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid x:Name="xGrid" Background="#00000000">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{TemplateBinding Width}"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <!--<Image x:Name="normal" Source="pack://application:,,,/Common;component/Resources/Images/icon_logout1.png"/>-->
                        <!--<Image x:Name="over" Opacity="0" Source="pack://application:,,,/Common;component/Resources/Images/icon_logout1_over.png"/>-->
                        <Path x:Name="xPath" Fill="{TemplateBinding Foreground}" Width="20" Height="20" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Stretch="Uniform" RenderTransformOrigin="0.5,0.5">
                            <Path.Data>
                                <PathGeometry Figures="M-46 647.017v-50.034c0-1.414 1.15-2.564 2.564-2.564h17.699v-3h-17.699c-3.073 0-5.564 2.491-5.564 5.564v50.034 c0 3.073 2.491 5.564 5.564 5.564h17.699v-3h-17.699C-44.85 649.582-46 648.431-46 647.017z
                                                       M3.692 621.049l-27.209-12.558c-0.433-0.197-0.95-0.08-1.252 0.293c-0.304 0.373-0.314 0.902-0.025 1.285l7.823 10.431 h-19.997v3h19.996l-7.822 10.43c-0.289 0.383-0.278 0.915 0.023 1.285c0.203 0.253 0.507 0.389 0.814 0.389 c0.149 0 0.297-0.031 0.437-0.096L3.69 622.949c0.373-0.172 0.609-0.542 0.609-0.95C4.299 621.591 4.063 621.22 3.692 621.049z" FillRule="EvenOdd" />
                            </Path.Data>
                        </Path>
                        <TextBlock Grid.Column="1" x:Name="txt" Text="{TemplateBinding Content}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="xGrid" Value="{DynamicResource Background_HamburgerButtonOver}"/>
                            <Setter Property="Foreground" TargetName="txt" Value="{DynamicResource Brush.White}"/>
                            <Setter Property="Fill" TargetName="xPath" Value="{DynamicResource Brush.White}"/>
                            <!--<Setter Property="Opacity" TargetName="over" Value="1"/>
                            <Setter Property="Opacity" TargetName="normal" Value="0"/>-->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" TargetName="txt" Value="{DynamicResource Brush.White}"/>
                            <!--<Setter Property="Opacity" TargetName="normal" Value="0"/>
                            <Setter Property="Opacity" TargetName="over" Value="1"/>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FF838383"/>
                            <!--<Setter Property="Opacity" TargetName="normal" Value="0.5"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:RadiusButton">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground_CommonText}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:RadiusButton}">
                    <Border CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Background="Transparent">
                            <ContentPresenter Margin="0,2,0,0"
                                              TextBlock.FontFamily="{StaticResource AppFont}"
                                              TextBlock.FontWeight="Bold"
                                              TextBlock.FontSize="{TemplateBinding FontSize}"
                                              TextBlock.Foreground="{TemplateBinding Foreground}"
                                              HorizontalAlignment="Center" VerticalAlignment="Center"
                                              Content="{TemplateBinding Content}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" TargetName="txt" Value="{DynamicResource Brush.White}"/>
                        </Trigger>-->
                        <!--<Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" TargetName="txt" Value="{DynamicResource Brush.White}"/>
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource Foreground_Disabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:RadiusButton" x:Key="RadiusButtonStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground_CommonText}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:RadiusButton}">
                    <Border CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Background="Transparent">
                            <TextBlock Margin="0,2,0,0" FontFamily="{StaticResource AppFont}" FontWeight="Bold" FontSize="{DynamicResource DefaultFontSize}"
                                       Foreground="{TemplateBinding Foreground}"
                                       HorizontalAlignment="Center" VerticalAlignment="Center"
                                       Text="{TemplateBinding Content}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource Foreground_Disabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:RemoveTextButton">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{StaticResource Foreground_Logout}"/>
        <!-- The control template. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:RemoveTextButton}">
                    <Grid Background="Transparent">
                        <!-- The background of the button, as an ellipse. -->
                        <Ellipse x:Name="backgroundEllipse" />

                        <!-- A path that renders a cross. -->
                        <Path x:Name="ButtonPath"
                              Margin="3"
                              Stroke="{StaticResource TabItemCloseButtonNormalForegroundBrush}"
                              StrokeThickness="1.5"
                              StrokeStartLineCap="Square"
                              StrokeEndLineCap="Square"
                              Stretch="Uniform"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center">
                            <Path.Data>
                                <PathGeometry>
                                    <PathGeometry.Figures>
                                        <PathFigure StartPoint="0,0">
                                            <LineSegment Point="25,25"/>
                                        </PathFigure>
                                        <PathFigure StartPoint="0,25">
                                            <LineSegment Point="25,0"/>
                                        </PathFigure>
                                    </PathGeometry.Figures>
                                </PathGeometry>
                            </Path.Data>
                        </Path>
                    </Grid>

                    <!-- The triggers. -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="backgroundEllipse" Property="Fill"
                                    Value="{StaticResource TabItemCloseButtonHoverBackgroundBrush}" />
                            <Setter TargetName="ButtonPath" Property="Stroke" 
                                    Value="{StaticResource TabItemCloseButtonHoverForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="backgroundEllipse" Property="Fill"
                                    Value="{StaticResource TabItemCloseButtonPressedBackgroundBrush}" />
                            <Setter TargetName="backgroundEllipse" Property="Stroke"
                                    Value="{StaticResource TabItemCloseButtonPressedBorderBrush}" />
                            <Setter TargetName="ButtonPath" Property="Stroke" 
                                    Value="{StaticResource TabItemCloseButtonPressedForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="ctrl:SearchButton">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{DynamicResource Background_SearchButton}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_SearchButtonOuter}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground_SearchText}"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="MinWidth" Value="55"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:SearchButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" BorderThickness="1" CornerRadius="2">
                        <Border x:Name="Inner" CornerRadius="1" BorderBrush="{DynamicResource Brush_SearchButtonInner}" BorderThickness="0,1,0,0">
                            <ctrl:HorizonPanel HorizontalAlignment="Center" Margin="5,0">
                                <Image Height="11" Source="pack://application:,,,/Common;component/Resources/Images/search_black_18dp.png" Stretch="Fill" Width="9"/>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="3,0,0,0"/>
                            </ctrl:HorizonPanel>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background"  TargetName="border" Value="{DynamicResource Background_SearchButtonOver}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Brush_SearchButtonOuterOver}"/>
                            <Setter Property="BorderBrush" TargetName="Inner" Value="{DynamicResource Brush_SearchButtonInnerOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background"  TargetName="border" Value="{DynamicResource Background_SearchButtonOver}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Brush_SearchButtonOuterOver}"/>
                            <Setter Property="Margin"      TargetName="Inner" Value="1 1 0 0"/>
                            <Setter Property="BorderBrush" TargetName="Inner" Value="{DynamicResource Brush_SearchButtonInnerOver}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.8"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:InitialButton">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{DynamicResource Background_SearchButton}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_SearchButtonOuter}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground_SearchText}"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="MinWidth" Value="50"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:InitialButton}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" BorderThickness="1" CornerRadius="2">
                        <Border x:Name="Inner" CornerRadius="1" BorderBrush="{DynamicResource Brush_SearchButtonInner}" BorderThickness="0,1,0,0">
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="5,0,5,1"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background"  TargetName="border" Value="{DynamicResource Background_SearchButtonOver}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Brush_SearchButtonOuterOver}"/>
                            <Setter Property="BorderBrush" TargetName="Inner" Value="{DynamicResource Brush_SearchButtonInnerOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background"  TargetName="border" Value="{DynamicResource Background_SearchButtonOver}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Brush_SearchButtonOuterOver}"/>
                            <Setter Property="Margin"      TargetName="Inner" Value="1 1 0 0"/>
                            <Setter Property="BorderBrush" TargetName="Inner" Value="{DynamicResource Brush_SearchButtonInnerOver}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="border" Value="0.8"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ctrl:PagingCommon">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground_ButtonText}"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Width" Value="18"/>
        <Setter Property="Height" Value="18"/>
        <Setter Property="Margin" Value="2,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:PagingCommon}">
                    <Border Background="{DynamicResource Background_PageButton}" BorderBrush="{DynamicResource Brush_PageButtonOuter}" BorderThickness="1" CornerRadius="2" x:Name="root" SnapsToDevicePixels="True">
                        <Border BorderBrush="{DynamicResource Brush_PageButtonInner}" CornerRadius="1" BorderThickness="0,1,0,0">
                            <Grid>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="7,0,0,0"/>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="root" Value="{DynamicResource Background_PageButtonOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="root" Value="{DynamicResource Background_PageButtonOver}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="root" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:PagingPrev">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground_ButtonText}"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Width" Value="18"/>
        <Setter Property="Height" Value="18"/>
        <Setter Property="Margin" Value="2,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:PagingPrev}">
                    <Border Background="{DynamicResource Background_PageButton}" BorderBrush="{DynamicResource Brush_PageButtonOuter}" BorderThickness="1" CornerRadius="2" x:Name="root" SnapsToDevicePixels="True">
                        <Border BorderBrush="{DynamicResource Brush_PageButtonInner}" CornerRadius="1" BorderThickness="0,1,0,0">
                            <Grid>
                                <!--<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.Column="1" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="7,0,0,0"/>-->
                                <Path x:Name="ArrowBottom" Data="M-0.67790158,0.48683691 C-0.67790158,0.48683691 7.7539062,0.46679688 7.7539062,0.46679688 7.7539062,0.46679688 3.5,6 3.5,6 3.5,6 -0.67790158,0.48683691 -0.67790158,0.48683691 z" Stretch="Uniform" Height="3" Width="Auto" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform Angle="90"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="root" Value="{DynamicResource Background_PageButtonOver}"/>
                            <Setter Property="BorderBrush" TargetName="root" Value="{DynamicResource Background_PageButtonOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="root" Value="{DynamicResource Background_PageButtonOver}"/>
                            <Setter Property="BorderBrush" TargetName="root" Value="{DynamicResource Background_PageButtonOver}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="root" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:PagingFirst">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground_ButtonText}"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Width" Value="18"/>
        <Setter Property="Height" Value="18"/>
        <Setter Property="Margin" Value="2,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:PagingFirst}">
                    <Border Background="{DynamicResource Background_PageButton}" BorderBrush="{DynamicResource Brush_PageButtonOuter}" BorderThickness="1" CornerRadius="2" x:Name="root" SnapsToDevicePixels="True">
                        <Border BorderBrush="{DynamicResource Brush_PageButtonInner}" CornerRadius="1" BorderThickness="0,1,0,0">
                            <Grid>
                                <!--<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.Column="2" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="7,0,0,0"/>-->
                                <ctrl:HorizonPanel HorizontalAlignment="Center">
                                    <Path x:Name="ArrowBottom" Data="M-0.67790158,0.48683691 C-0.67790158,0.48683691 7.7539062,0.46679688 7.7539062,0.46679688 7.7539062,0.46679688 3.5,6 3.5,6 3.5,6 -0.67790158,0.48683691 -0.67790158,0.48683691 z" Stretch="Uniform" Height="3" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform Angle="90"/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>
                                    <Path x:Name="ArrowBottom_Copy" Data="M-0.67790158,0.48683691 C-0.67790158,0.48683691 7.7539062,0.46679688 7.7539062,0.46679688 7.7539062,0.46679688 3.5,6 3.5,6 3.5,6 -0.67790158,0.48683691 -0.67790158,0.48683691 z" Stretch="Uniform" Height="3" Width="Auto" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5" Grid.Column="1" Grid.ColumnSpan="1">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform Angle="90"/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>
                                </ctrl:HorizonPanel>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="root" Value="{DynamicResource Background_PageButtonOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="root" Value="{DynamicResource Background_PageButtonOver}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="root" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:PagingNext">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground_ButtonText}"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Width" Value="18"/>
        <Setter Property="Height" Value="18"/>
        <Setter Property="Margin" Value="2,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:PagingNext}">
                    <Border Background="{DynamicResource Background_PageButton}" BorderBrush="{DynamicResource Brush_PageButtonOuter}" BorderThickness="1" CornerRadius="2" x:Name="root" SnapsToDevicePixels="True">
                        <Border BorderBrush="{DynamicResource Brush_PageButtonInner}" CornerRadius="1" BorderThickness="0,1,0,0">
                            <Grid>
                                <!--<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,7,0"/>-->
                                <Path x:Name="ArrowBottom" Data="M-0.67790158,0.48683691 C-0.67790158,0.48683691 7.7539062,0.46679688 7.7539062,0.46679688 7.7539062,0.46679688 3.5,6 3.5,6 3.5,6 -0.67790158,0.48683691 -0.67790158,0.48683691 z" Stretch="Uniform" Height="3" Width="Auto" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" Grid.Column="1">
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform Angle="270"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="root" Value="{DynamicResource Background_PageButtonOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="root" Value="{DynamicResource Background_PageButtonOver}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="root" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:PagingLast">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground_ButtonText}"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Width" Value="18"/>
        <Setter Property="Height" Value="18"/>
        <Setter Property="Margin" Value="2,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:PagingLast}">
                    <Border Background="{DynamicResource Background_PageButton}" BorderBrush="{DynamicResource Brush_PageButtonOuter}" BorderThickness="1" CornerRadius="2" x:Name="root" SnapsToDevicePixels="True">
                        <Border BorderBrush="{DynamicResource Brush_PageButtonInner}" CornerRadius="1" BorderThickness="0,1,0,0">
                            <ctrl:HorizonPanel HorizontalAlignment="Center">
                                <!--<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,7,0"/>-->
                                <Path x:Name="ArrowBottom" Data="M-0.67790158,0.48683691 C-0.67790158,0.48683691 7.7539062,0.46679688 7.7539062,0.46679688 7.7539062,0.46679688 3.5,6 3.5,6 3.5,6 -0.67790158,0.48683691 -0.67790158,0.48683691 z" Stretch="Uniform" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" Grid.Column="1" Height="3">
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform Angle="270"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                                <Path x:Name="ArrowBottom_Copy" Data="M-0.67790158,0.48683691 C-0.67790158,0.48683691 7.7539062,0.46679688 7.7539062,0.46679688 7.7539062,0.46679688 3.5,6 3.5,6 3.5,6 -0.67790158,0.48683691 -0.67790158,0.48683691 z" Stretch="Uniform" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" Grid.Column="2" Grid.ColumnSpan="1" Height="3">
                                    <Path.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform Angle="270"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Path.RenderTransform>
                                </Path>
                            </ctrl:HorizonPanel>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="root" Value="{DynamicResource Background_PageButtonOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="root" Value="{DynamicResource Background_PageButtonOver}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="root" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion //Button-->
    
    <!--#region ComboBox-->
    <ControlTemplate TargetType="{x:Type ComboBox}" x:Key="ComboBoxEditableTemplate">
        <Grid x:Name="Placement" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                <Border x:Name="Shdw" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=Placement}">
                    <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Border>
            </Popup>
            <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" />
            <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
            <ToggleButton Grid.Column="1" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource ComboBoxToggleButton}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="IsDropDownOpen" Value="true"/>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                <Setter Property="Background" Value="#FFF4F4F4"/>
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
            </Trigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type ctrl:PopupComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource Brushes.Combo.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource Brushes.Combo.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brushes.Combo.Border}"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                            <Border x:Name="Shdw" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                    <ctrl:PopupScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Grid>
                                    </ctrl:PopupScrollViewer>
                                </Border>
                            </Border>
                        </Popup>
                        <ToggleButton BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxReadonlyToggleButton}"/>
                        <ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                            <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                        </Trigger>
                        <!--<Trigger Property="HasItems" Value="false">
							<Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
						</Trigger>-->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource Brushes.Combo.Disabled}"/>
                            <Setter Property="Background" Value="{DynamicResource Brushes.Combo.PopupDisabled}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="BorderBrush">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
                            <GradientStop Color="#ABADB3" Offset="0.05"/>
                            <GradientStop Color="#E2E3EA" Offset="0.07"/>
                            <GradientStop Color="#E3E9EF" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="3"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Brushes.Combo.Disabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->


    <!--#region ListBox-->
    <Style TargetType="ListBoxItem" x:Key="ListBoxItemStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}"/>
        <Setter Property="FontSize" Value="{DynamicResource ListBoxFontSize}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding DataContext}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Brush_ListViewItemOver}"/>
                            <Setter Property="ToolTip" Value="{Binding Content.CONTENT, RelativeSource={x:Static RelativeSource.Self}}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Brush_ListViewItemSelect}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:BindableListBox">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_ListViewBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.Black}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemStyle}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:BindableListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer BorderThickness="0" Focusable="False">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="White"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#FFD9D9D9"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion //ListBox-->

    <!--#region List GridView-->
    <DataTemplate x:Key="GridViewCenterCellTemplate">
        <TextBlock ctrl:GridViewEx.HorizontalContainerAlignment="Center" VerticalAlignment="Center"
                   Text="{Binding Path=.}"/>
    </DataTemplate>
    <DataTemplate x:Key="GridViewRightCellTemplate">
        <TextBlock ctrl:GridViewEx.HorizontalContainerAlignment="Right" VerticalAlignment="Center"
                   Text="{Binding Path=.}"/>
    </DataTemplate>
    <!--#endregion //List GridView-->

    <!--#region Panel-->
    <Style TargetType="ctrl:PopupBottomPanel">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,0,5,0"/>
    </Style>
    
    <Style TargetType="StackPanel" x:Key="HorizonPanelStyle">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
    </Style>
    <Style TargetType="StackPanel" x:Key="VerticalPanelStyle">
        <Setter Property="Orientation" Value="Vertical"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
    </Style>

    <Style TargetType="ctrl:HorizonPanel">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    <Style TargetType="ctrl:VerticalPanel">
        <Setter Property="Orientation" Value="Vertical"/>
    </Style>
    <Style TargetType="ctrl:RightPanel">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,0,10,0"/>
    </Style>
    <!--#endregion-->

    <!--#region PasswordBox-->
    <Style TargetType="PasswordBox">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}" />
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border BorderThickness="1" BorderBrush="{StaticResource Brush_PopupCommon}">
                        <Microsoft_Windows_Themes:ListBoxChrome x:Name="Bd" BorderThickness="0"
                                                            RenderMouseOver="{TemplateBinding IsMouseOver}" RenderFocused="{TemplateBinding IsKeyboardFocusWithin}" SnapsToDevicePixels="true">
                            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Microsoft_Windows_Themes:ListBoxChrome>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="PasswordBox" x:Key="PasswordBoxLoginStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}" />
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border BorderThickness="0" BorderBrush="{StaticResource Brush_PopupCommon}">
                        <Microsoft_Windows_Themes:ListBoxChrome x:Name="Bd" BorderThickness="0"
                                                            RenderMouseOver="{TemplateBinding IsMouseOver}" RenderFocused="{TemplateBinding IsKeyboardFocusWithin}" SnapsToDevicePixels="true">
                            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Microsoft_Windows_Themes:ListBoxChrome>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="PasswordBox" x:Key="BasePassWord">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}" />
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border BorderThickness="1" BorderBrush="{StaticResource Brush_PopupCommon}">
                        <Microsoft_Windows_Themes:ListBoxChrome x:Name="Bd" BorderThickness="0"
                                                            RenderMouseOver="{TemplateBinding IsMouseOver}" RenderFocused="{TemplateBinding IsKeyboardFocusWithin}" SnapsToDevicePixels="true">
                            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Microsoft_Windows_Themes:ListBoxChrome>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ctrl:WaterMarkPassword">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}" />
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="AllowDrop" Value="False"/>
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:WaterMarkPassword}">
                    <Border BorderBrush="{StaticResource Brush_PopupCommon}">
                        <Grid>
                            <TextBlock x:Name="PART_WaterMark"
                                       Margin="5,6,0,0" Focusable="False"
                                       VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                       Text="{TemplateBinding WaterMark}"
                                       FontSize="{TemplateBinding FontSize}"
                                       FontFamily="{StaticResource AppFont}"
                                       Visibility="{Binding Path=IsChecked, ElementName=xEyeToggle, Converter={StaticResource BooleanToVisibilityInvertConverter}, ConverterParameter=false}"
                                       Foreground="{Binding Path=Foreground, ElementName=xWaterMarkTextBox}"
                                       Width="{TemplateBinding ActualWidth}"
                                       Height="{TemplateBinding ActualHeight}"/>
                            <PasswordBox x:Name="PART_PasswordBox" MinWidth="120" HorizontalAlignment="Stretch"
                                         Foreground="{TemplateBinding Foreground}"
                                         Style="{DynamicResource PasswordBoxLoginStyle}"
                                         BorderThickness="{TemplateBinding BorderThickness}"
                                         Focusable="{TemplateBinding Focusable}"
                                         TabIndex="{TemplateBinding TabIndex}"
                                         IsTabStop="True"
                                         PasswordChar="{TemplateBinding PasswordChar}"
                                         Visibility="{Binding Path=IsChecked, ElementName=xEyeToggle, Converter={StaticResource BooleanToVisibilityInvertConverter}, ConverterParameter=false}"
                                         util:PasswordHelper.Attach="True"
                                         util:PasswordHelper.Password="{Binding Password, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                            <ctrl:WaterMarkTextBox x:Name="xWaterMarkTextBox" Margin="0"
                                                   WaterMark="{TemplateBinding WaterMark}"
                                                   BorderThickness="{TemplateBinding BorderThickness}"
		                                           Focusable="{TemplateBinding Focusable}"
		                                           TabIndex="{TemplateBinding TabIndex}"
		                                           IsTabStop="{TemplateBinding IsTabStop}"
                                                   Width="{TemplateBinding ActualWidth}"
                                                   Height="{TemplateBinding ActualHeight}"
                                                   FontSize="{TemplateBinding FontSize}"
                                                   FontFamily="{StaticResource AppFont}"
                                                   Visibility="{Binding Path=IsChecked, ElementName=xEyeToggle, Converter={StaticResource BooleanToVisibilityInvertConverter}}"
                                                   Text="{Binding Password, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                            <ctrl:RightPanel Margin="0">
                                <ctrl:EyeToggleButton x:Name="xEyeToggle" Width="16" Height="16" Margin="0,2,2,2" Focusable="False" IsTabStop="False"
                                                      HorizontalAlignment="Right" VerticalAlignment="Center" />
                                <ctrl:RemoveTextButton x:Name="PART_Remove" Margin="4" Width="12" Visibility="Collapsed" Focusable="False" IsTabStop="False"/>
                            </ctrl:RightPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Remove" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <DataTrigger  Binding="{Binding Path=IsFocused, ElementName=PART_PasswordBox}" Value="True">
                            <Setter TargetName="PART_WaterMark" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Password, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource StringEmptyToVisibilityConverter}}" Value="Collapsed">
                            <Setter TargetName="PART_WaterMark" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion //PasswordBox-->

    <!--#region ProgressBar-->
    <Style TargetType="ProgressBar">
        <Setter Property="Height" Value="32"/>
        <Setter Property="Margin" Value="10,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar">
                    <Border BorderBrush="{DynamicResource Brush_Progress}" BorderThickness="1" CornerRadius="5" Padding="1">
                        <Grid x:Name="PART_Track">
                            <Rectangle x:Name="PART_Indicator" HorizontalAlignment="Left" RadiusX="5" RadiusY="5" Fill="{DynamicResource Brush_ProgressFill}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion //ProgressBar-->

    <!--#region TextBlock-->
    <Style TargetType="TextBlock" x:Key="TextBased">
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Foreground_Disabled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="TextBlock" BasedOn="{StaticResource TextBased}" x:Key="PopupTextBlockStyle">
        <Setter Property="Foreground" Value="{DynamicResource Foreground_CommonText}"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="0,8,0,0"/>
        <Setter Property="LineHeight" Value="20"/>
    </Style>

    <Style TargetType="ctrl:PopupTextBlockHeader">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.White}"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
        <Setter Property="Margin" Value="15,1,0,0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    <Style TargetType="ctrl:PopupTextBlockHeader" x:Key="PopupTextBlockHeaderStyle">
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.White}"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
        <Setter Property="Margin" Value="15,1,0,0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style TargetType="ctrl:TextBlockMainHeader" BasedOn="{StaticResource TextBased}">
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource Brush.White}"/>
    </Style>

    <Style TargetType="ctrl:PagingTextBlock" BasedOn="{StaticResource TextBased}">
        <Setter Property="Foreground" Value="{DynamicResource Foreground_PageText}"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="3,1,3,0"/>
    </Style>
    <Style TargetType="ctrl:PagingCountTextBlock" BasedOn="{StaticResource TextBased}">
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground_CommonText}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <!--[2016.02.01 추가] TextTrimming 속성이 CharacterEllipsis 일 때 IsTrimmingToolTip="True" 이면 ToolTip를 표시한다.-->
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ctrl:TextBlockService.IsTextTrimmed" Value="True"/>
                    <Condition Property="IsTrimmingToolTip" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="ToolTip" Value="{Binding Path=Text, RelativeSource={RelativeSource Self}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion //TextBlock-->

    <!--#region TextBox-->
    <Style TargetType="TextBox">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}" />
    </Style>
    <Style TargetType="TextBox" x:Key="BaseTextBoxStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}" />
    </Style>
    <Style TargetType="TextBox" x:Key="TextBoxStyle">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{DynamicResource Background_TextBox}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_TextBox}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground_CommonText}"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="2">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Margin="2,1,2,0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Background_PopupFocus}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Background_PopupFocus}"/>
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Background_PopupDisabled}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Background_PopupDisabled}"/>
                            <Setter Property="Foreground" Value="{DynamicResource Foreground_DisabledText}"/>
                        </Trigger>
                        <!--<DataTrigger Binding="{Binding Source={x:Static lang:ConvertLanguage.CurrentLangType}}" Value="{x:Static lang:CurrentLanguageTypes.ja}">
                            <Setter Property="Margin" TargetName="PART_ContentHost" Value="2,-2,0,0"/>
                        </DataTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>
    <Style TargetType="ctrl:PopupTextBox" BasedOn="{StaticResource BaseTextBoxStyle}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    <Style TargetType="ctrl:NumericTextBox" BasedOn="{StaticResource TextBoxStyle}"/>
    <Style TargetType="ctrl:WaterMarkTextBox">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource TextBoxFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource Background_PopupCommon}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_PopupCommon}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground_CommonText}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource Brush.Red}"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}"/>
        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="5,0,0,0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="AllowDrop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:WaterMarkTextBox}">
                    <Grid>
                        <TextBlock x:Name="PART_WaterMark"
                                   Margin="5,6,0,0" Focusable="False"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="Center"
                                   Text="{TemplateBinding WaterMark}"
                                   Width="{TemplateBinding ActualWidth}"
                                   Height="{TemplateBinding ActualHeight}">
                            <TextBlock.Visibility>
                                <MultiBinding Converter="{StaticResource TextInputToVisibilityConverter}">
                                    <Binding ElementName="PART_TextBox" Path="Text" />
                                    <Binding ElementName="PART_TextBox" Path="IsFocused" />
                                </MultiBinding>
                            </TextBlock.Visibility>
                        </TextBlock>
                        <ctrl:PopupTextBox x:Name="PART_TextBox" Background="Transparent" Margin="0" MaxLength="{TemplateBinding MaxLength}"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                           Focusable="{TemplateBinding Focusable}"
                                           TabIndex="{TemplateBinding TabIndex}"
                                           IsTabStop="True"
                                           BorderThickness="{TemplateBinding BorderThickness}"
                                           Width="{TemplateBinding ActualWidth}"
                                           Height="{TemplateBinding ActualHeight}"
                                           Text="{Binding Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}"/>

                        <ctrl:RemoveTextButton x:Name="PART_Remove" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="4" Width="12" Height="12" Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsEnabledRemove" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Remove" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion //TextBox-->
    
    <!--#region Toggle-->
    <Style TargetType="ctrl:EyeToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:EyeToggleButton}">
                    <Grid Width="16" Height="16" Background="Transparent">
                        <Image x:Name="hide" Width="12" Height="14" Source="../Resources/Images/pw_hide.png" Stretch="Fill"/>
                        <Image x:Name="show" Width="12" Height="14" Source="../Resources/Images/pw_show.png" Stretch="Fill" Opacity="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="hide" Property="Opacity" Value="0"/>
                            <Setter TargetName="show" Property="Opacity" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion //Toggle-->
    
    <!--#region UpDownControls-->
    <ctrl:IsCornerCtrlCornerToRadiusConverter x:Key="IsCornerCtrlCornerToRadiusConverter"/>
    <ctrl:ThicknessToMarginConverter x:Key="ThicknessToMarginConverter" />
    <LinearGradientBrush x:Key="HighlightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#E8F5FD" Offset="0.0"/>
                <GradientStop Color="#AADAF6" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#C2E4F6" Offset="0.1"/>
                <GradientStop Color="#91CCEB" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <Style TargetType="{x:Type ctrl:ArrowRepeatButton}">
        <Setter Property="Padding" Value="0,0,0,0"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:ArrowRepeatButton}">
                    <Grid Margin="0,0,0,0">
                        <Border x:Name="Border" BorderThickness="1"
                            CornerRadius="{Binding IsCornerCtrlCorner, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:ArrowRepeatButton}}, Converter={StaticResource IsCornerCtrlCornerToRadiusConverter}, ConverterParameter=0x2}">
                            <Border x:Name="Shadow" BorderBrush="#88FFFFFF" BorderThickness="1,1,1,1"
                                CornerRadius="{Binding IsCornerCtrlCorner, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:ArrowRepeatButton}}, Converter={StaticResource IsCornerCtrlCornerToRadiusConverter}, ConverterParameter=0x2}"/>
                        </Border>
                        <!-- Trouble with Microsoft_Windows_Themes:ButtonChrome is that it has a single property 'RoundCorners',
                        which is either True or False. When set to False, left hand side of button is right angled, while right
                        hand side is slightly rounded. We want to be able to choose which corner is rounded and which is not.
                            <Microsoft_Windows_Themes:ButtonChrome x:Name="Chrome" SnapsToDevicePixels="False" ClipToBounds="True"
                                                               HorizontalAlignment="Stretch" 
                                                               RenderMouseOver="{TemplateBinding IsMouseOver}" 
                                                               RenderPressed="{TemplateBinding IsPressed}"
                                                               RoundCorners="False"/>-->
                        <Path Name="Arrow" Fill="Black" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="-1,2,0,0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="RepeatButton.IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#3C7FB1"/>
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightBrush}"/>
                        </Trigger>
                        <Trigger Property="RepeatButton.IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#2C628B" />
                            <Setter TargetName="Shadow" Property="BorderThickness" Value="1,1,0,0" />
                            <Setter TargetName="Shadow" Property="BorderBrush" Value="#44000000" />
                        </Trigger>
                        <Trigger Property="RepeatButton.IsEnabled" Value="False">
                            <Setter TargetName="Shadow" Property="BorderThickness" Value="0" />
                            <Setter TargetName="Border" Property="Background" Value="#F4F4F4" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="#00000000" />
                            <Setter TargetName="Arrow" Property="Fill" Value="#AFAFAF" />
                        </Trigger>
                        <Trigger Property="ButtonArrowType" Value="Down">
                            <Setter TargetName="Arrow" Property="Data" Value="M 0 0 L 3.5 4 L 7 0 Z" />
                        </Trigger>
                        <Trigger Property="ButtonArrowType" Value="Up">
                            <Setter TargetName="Arrow" Property="Data" Value="M 0 2 L 3.5 -2 L 7 2 Z" />
                        </Trigger>
                        <Trigger Property="ButtonArrowType" Value="Left">
                            <Setter TargetName="Arrow" Property="Data" Value="M 0 0 L 4 3.5 L 4 -3.5 Z" />
                        </Trigger>
                        <Trigger Property="ButtonArrowType" Value="Right">
                            <Setter TargetName="Arrow" Property="Data" Value="M 0 3.5 L 4 0 L 0 -3.5 Z" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Other theme specific values here (that is, that are not used by RepeatArrowBotton) -->
    <Style x:Key="UpDownButtonsStyle" TargetType="{x:Type ctrl:UpDownButtons}">
        <Setter Property="Margin" Value="0,0,0,0"/>
    </Style>
    <Style x:Key="TimeCtrlsGridStyle" TargetType="{x:Type Grid}">
        <Setter Property="Margin" Value="{Binding ElementName=TextBoxCtrl, 
                                Path=BorderThickness,
                                Converter={StaticResource ThicknessToMarginConverter},
                                ConverterParameter=false}"/>
    </Style>
    <!--#endregion //UpDownControls-->

    <!--#region ScrollBar-->
    <Style TargetType="{x:Type ctrl:PopupScrollBar}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ContextMenu" Value="{x:Null}"/>
        <Setter Property="Width" Value="12"/>
        <Setter Property="MinWidth" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="1E-05*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Border Background="{DynamicResource Brushes.ScrollBar.Background}" BorderBrush="{DynamicResource Brushes.ScrollBar.Border}" Grid.RowSpan="3" BorderThickness="1,0,0,0"/>
                        <RepeatButton x:Name="PART_LineUpButton" Command="ScrollBar.LineUpCommand" IsEnabled="{TemplateBinding IsMouseOver}" Margin="2,2,2,1" Background="{DynamicResource Brushes.Scroll.Arrow}">
                            <RepeatButton.Style>
                                <Style TargetType="{x:Type RepeatButton}">
                                    <Setter Property="BorderThickness" Value="1"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                                    <Setter Property="Padding" Value="1"/>
                                    <Setter Property="Focusable" Value="False"/>
                                    <Setter Property="IsTabStop" Value="False"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                <Border x:Name="border" SnapsToDevicePixels="True" Background="#00FFFFFF">
                                                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource Brushes.Scroll.Arrow.Over}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsPressed" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource Brushes.Scroll.Arrow.Press}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </RepeatButton.Style>
                            <Path x:Name="ArrowTop" Data="M-1.0260417,6 C-1.0260417,6 8.1419819,6.0286114 8.1419819,6.0286114 8.1419819,6.0286114 3.5,0.5 3.5,0.5 3.5,0.5 -1.0260417,6 -1.0260417,6 z" Stretch="Uniform" Height="4" Width="7" Fill="{DynamicResource Brushes.Scroll.Arrow}"/>
                        </RepeatButton>
                        <Track x:Name="PART_Track" IsDirectionReversed="True" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageUpCommand">
                                    <RepeatButton.Style>
                                        <Style TargetType="{x:Type RepeatButton}">
                                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Focusable" Value="False"/>
                                            <Setter Property="IsTabStop" Value="False"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                        <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </RepeatButton.Style>
                                </RepeatButton>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageDownCommand">
                                    <RepeatButton.Style>
                                        <Style TargetType="{x:Type RepeatButton}">
                                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Focusable" Value="False"/>
                                            <Setter Property="IsTabStop" Value="False"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                        <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </RepeatButton.Style>
                                </RepeatButton>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb>
                                    <Thumb.Style>
                                        <Style TargetType="{x:Type Thumb}">
                                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                                            <Setter Property="IsTabStop" Value="False"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                                        <Border x:Name="border1" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" BorderThickness="1" Background="{DynamicResource Brushes.Scroll.Background}"/>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Background" TargetName="border1" Value="{DynamicResource Brushes.Scroll.Background.Over}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsDragging" Value="True">
                                                                <Setter Property="Background" TargetName="border1" Value="{DynamicResource Brushes.Scroll.Background.Over}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Opacity" TargetName="border1" Value="0.5"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Thumb.Style>
                                </Thumb>
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="PART_LineDownButton" Command="ScrollBar.LineDownCommand" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Margin="2,1,2,2">
                            <RepeatButton.Style>
                                <Style TargetType="{x:Type RepeatButton}">
                                    <Setter Property="BorderThickness" Value="1"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                                    <Setter Property="Padding" Value="1"/>
                                    <Setter Property="Focusable" Value="False"/>
                                    <Setter Property="IsTabStop" Value="False"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                <Border x:Name="border" SnapsToDevicePixels="True" Background="#00FFFFFF">
                                                    <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource Brushes.Scroll.Arrow.Over}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsPressed" Value="True">
                                                        <Setter Property="Foreground" Value="{DynamicResource Brushes.Scroll.Arrow.Press}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </RepeatButton.Style>
                            <Path x:Name="ArrowBottom" Data="M-0.67790158,0.48683691 C-0.67790158,0.48683691 7.7539062,0.46679688 7.7539062,0.46679688 7.7539062,0.46679688 3.5,6 3.5,6 3.5,6 -0.67790158,0.48683691 -0.67790158,0.48683691 z" Stretch="Uniform" Height="4" Width="7" Fill="{DynamicResource Brushes.Scroll.Arrow}"/>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="#FF666666"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="#FF666666"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="Black"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="Black"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="ArrowTop" Value="0.56"/>
                            <Setter Property="Opacity" TargetName="ArrowBottom" Value="0.56"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="12"/>
                <Setter Property="MinHeight" Value="12"/>
                <!--<Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
				<Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>-->
                <Setter Property="BorderThickness" Value="0,1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="True">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="1E-05*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <Border Background="{DynamicResource Brushes.ScrollBar.Background}" BorderBrush="{DynamicResource Brushes.ScrollBar.Border}" Grid.Column="0" BorderThickness="0,1,0,0" Grid.ColumnSpan="3"/>
                                <RepeatButton x:Name="PART_LineLeftButton" Command="ScrollBar.LineLeftCommand" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <RepeatButton.Style>
                                        <Style TargetType="{x:Type RepeatButton}">
                                            <Setter Property="BorderThickness" Value="1"/>
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                                            <Setter Property="Padding" Value="1"/>
                                            <Setter Property="Focusable" Value="False"/>
                                            <Setter Property="IsTabStop" Value="False"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                        <Border x:Name="border" SnapsToDevicePixels="True" Background="#00FFFFFF">
                                                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Foreground" Value="{DynamicResource Brushes.Scroll.Arrow.Over}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter Property="Foreground" Value="{DynamicResource Brushes.Scroll.Arrow.Press}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </RepeatButton.Style>
                                    <Path x:Name="ArrowLeft" Data="M3.18,7 C3.18,7 3.18,0 3.18,0 3.18,0 0,3.5 0,3.5 0,3.5 3.18,7 3.18,7 z" Fill="{DynamicResource Brushes.Scroll.Arrow}" Margin="3,0" Stretch="Uniform" Height="7" Width="4"/>
                                </RepeatButton>
                                <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="ScrollBar.PageLeftCommand">
                                            <RepeatButton.Style>
                                                <Style TargetType="{x:Type RepeatButton}">
                                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="Focusable" Value="False"/>
                                                    <Setter Property="IsTabStop" Value="False"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </RepeatButton.Style>
                                        </RepeatButton>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="ScrollBar.PageRightCommand">
                                            <RepeatButton.Style>
                                                <Style TargetType="{x:Type RepeatButton}">
                                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="Focusable" Value="False"/>
                                                    <Setter Property="IsTabStop" Value="False"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                                <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </RepeatButton.Style>
                                        </RepeatButton>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb>
                                            <Thumb.Style>
                                                <Style TargetType="{x:Type Thumb}">
                                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                    <Setter Property="IsTabStop" Value="False"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                                <Border x:Name="border1" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" Background="{DynamicResource Brushes.Scroll.Background}"/>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Background" TargetName="border1" Value="{DynamicResource Brushes.Scroll.Background.Over}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsDragging" Value="True">
                                                                        <Setter Property="Background" TargetName="border1" Value="{DynamicResource Brushes.Scroll.Background.Over}"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Opacity" TargetName="border1" Value="0.5"/>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </Thumb.Style>
                                        </Thumb>
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton x:Name="PART_LineRightButton" Grid.Column="2" Command="ScrollBar.LineRightCommand" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <RepeatButton.Style>
                                        <Style TargetType="{x:Type RepeatButton}">
                                            <Setter Property="BorderThickness" Value="1"/>
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                                            <Setter Property="Padding" Value="1"/>
                                            <Setter Property="Focusable" Value="False"/>
                                            <Setter Property="IsTabStop" Value="False"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                                                        <Border x:Name="border" SnapsToDevicePixels="True" Background="#00FFFFFF">
                                                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Foreground" Value="{DynamicResource Brushes.Scroll.Arrow.Over}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter Property="Foreground" Value="{DynamicResource Brushes.Scroll.Arrow.Press}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </RepeatButton.Style>
                                    <Path x:Name="ArrowRight" Data="M1.81,7 C1.81,7 1.81,0 1.81,0 1.81,0 5,3.5 5,3.5 5,3.5 1.81,7 1.81,7 z" Fill="{DynamicResource Brushes.Scroll.Arrow}" Margin="3,0" Stretch="Uniform" Width="4" Height="7"/>
                                </RepeatButton>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="#FF666666"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="#FF666666"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="Black"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="Black"/>
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="ArrowLeft" Value="0.56"/>
                                    <Setter Property="Opacity" TargetName="ArrowRight" Value="0.56"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion //ScrollBar-->
    <!--#region ScrollViewer-->
    <Style TargetType="{x:Type ctrl:PopupScrollViewer}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderThickness" Value="1,1,0,1"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}"/>
        <Setter Property="CanContentScroll" Value="False"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:PopupScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource Brushes.Scroll.Fill}" Grid.Row="1"/>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                        <ctrl:PopupScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                        <ctrl:PopupScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion //ScrollViewer-->

    <!--#region SearchPanel-->
    <Style TargetType="ctrl:SearchPanel">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:SearchPanel}">
                    <Grid x:Name="PART_CONTROL_AREA" IsHitTestVisible="True">
                        <Rectangle x:Name="PART_BACKGROUND_AREA" IsHitTestVisible="True" Visibility="Collapsed" Opacity="0">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="#FF333333" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <Grid Name="PART_CONTENT_AREA" VerticalAlignment="Top" IsHitTestVisible="True">
                            <ItemsControl x:Name="Root" UseLayoutRounding="True">
                                <ItemsControl.Template>
                                    <ControlTemplate TargetType="ItemsControl">
                                        <ItemsPresenter/>
                                    </ControlTemplate>
                                </ItemsControl.Template>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <!--Parent="{Binding ElementName=PART_CONTENT_AREA}"-->
                                        <ctrl:SearchWrapPanel ItemSize="LastWidthStar" HorizontalAlignment="Left" Parent="{Binding ElementName=PART_CONTROL_AREA}"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                            <Grid x:Name="PART_SEARCHBUTTON_AREA" HorizontalAlignment="Stretch">
                                <ctrl:RightPanel x:Name="BtnPanel" Orientation="Horizontal" VerticalAlignment="Bottom" Background="{x:Null}" Margin="2">
                                    <ctrl:InitialButton Content="{Binding LanguageInitialize, FallbackValue=Initialize}" IsEnabled="{Binding IsEnabled, ElementName=BtnSearch}" Visibility="{TemplateBinding Property=VisibilityInitial}"
                                                        Command="{Binding InitialCommand}"
                                                        CommandParameter="{Binding Path=Tag, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ctrl:SearchPanel}}}"/>
                                    <ctrl:SearchButton x:Name="BtnSearch" Content="{Binding LanguageSearch, FallbackValue=Search}" IsEnabled="{Binding IsEnabledSearching}"
                                                       Command="{Binding SearchCommand}"
                                                       CommandParameter="{Binding Path=Tag, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ctrl:SearchPanel}}}"/>
                                </ctrl:RightPanel>
                            </Grid>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="ctrl:SearchPanel.Show">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="PART_BACKGROUND_AREA" Storyboard.TargetProperty="(UIElement.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                                    </ObjectAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_BACKGROUND_AREA" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.5"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_CONTENT_AREA" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)">
                                        <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="-400"/>
                                        <EasingDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="ctrl:SearchPanel.Hide">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_CONTENT_AREA" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)">
                                        <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="-400"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_BACKGROUND_AREA" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.5"/>
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" KeySpline="0,0,0.38,1"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="PART_BACKGROUND_AREA" Storyboard.TargetProperty="(UIElement.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Collapsed}"/>
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion //SearchPanel-->

    <!--#region ToggleButton-->
    <Style TargetType="{x:Type ToggleButton}" x:Key="ComboBoxToggleButton">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                        <Path x:Name="Arrow" Data="{DynamicResource DownArrowGeometry}" Fill="Black" HorizontalAlignment="Center" Margin="0,1,0,0" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true"/>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource Brushes.Toggle.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion //ToggleButton-->


    <!--#region ChildWindow-->
    <Style TargetType="ctrl:ChildWindow">
        <Setter Property="MinWidth" Value="140"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="Margin" Value="-15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:ChildWindow}">
                    <Canvas x:Name="PART_Root"
                            Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=ctrl:ChildWindow}}"
                            Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=ctrl:ChildWindow}}">
                        <Rectangle Opacity="1"
                                   Width="{Binding Path=ActualWidth, ElementName=PART_Root}"
                                   Height="{Binding Path=ActualHeight, ElementName=PART_Root}"
                                   Fill="#00000000"/>
                        <!-- Used for drag -->
                        <Border x:Name="PART_WindowRoot"
                                MinWidth="{TemplateBinding MinWidth}"
                                MinHeight="{TemplateBinding MinHeight}"
                                Width="{TemplateBinding ChildWidth}"
                                Height="{TemplateBinding ChildHeight}"
                                BorderThickness="1" 
                                BorderBrush="{DynamicResource Brush_WindowBorder}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Border x:Name="Header" Height="30"
                                        Background="{DynamicResource Background_Header}"
                                        Visibility="{Binding CaptionVisible}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <ctrl:PopupTextBlockHeader x:Name="xHeader" Text="{TemplateBinding Caption}"/>
                                        <ctrl:PopupTextBlockHeader Grid.Column="1" Margin="5,0,30,0" x:Name="PART_Header"
                                                   TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" IsTrimmingToolTip="True"
                                                   Visibility="{Binding Path=Text, RelativeSource={RelativeSource Self}, Converter={StaticResource StringEmptyToVisibilityConverter}}"
                                                   Text="{TemplateBinding Caption2}">
                                            <ctrl:PopupTextBlockHeader.Style>
                                                <Style TargetType="ctrl:PopupTextBlockHeader" BasedOn="{StaticResource PopupTextBlockHeaderStyle}">
                                                    <Style.Triggers>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="ctrl:TextBlockService.IsTextTrimmed" Value="True"/>
                                                                <Condition Property="IsTrimmingToolTip" Value="True"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="ToolTip" Value="{Binding Path=Text, RelativeSource={RelativeSource Self}}"/>
                                                        </MultiTrigger>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="ctrl:TextBlockService.IsTextTrimmed" Value="False"/>
                                                                <Condition Property="IsTrimmingToolTip" Value="True"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="ToolTip" Value="{x:Null}"/>
                                                        </MultiTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ctrl:PopupTextBlockHeader.Style>
                                            <ctrl:PopupTextBlockHeader.Width>
                                                <MultiBinding Converter="{StaticResource WidthConverter}" UpdateSourceTrigger="PropertyChanged">
                                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    <Binding Path="." ElementName="xHeader"/>
                                                    <Binding Path="." RelativeSource="{RelativeSource Self}"/>
                                                </MultiBinding>
                                            </ctrl:PopupTextBlockHeader.Width>
                                        </ctrl:PopupTextBlockHeader>

                                        <ctrl:RightPanel Grid.ColumnSpan="2">
                                            <!--<ctrl:WindowMinButton Margin="0,-5,5,0" Command="{Binding Path=DataContext.MinWindowCommand, RelativeSource={RelativeSource AncestorType=ctrl:ChildWindow}}" CommandParameter="Minimized"/>-->
                                            <!--<ctrl:WindowMaxButton Margin="2,-5,2,0" Command="{Binding CommandWindowMax, RelativeSource={RelativeSource AncestorType=Window}}" CommandParameter="Maximized"/>-->
                                            <ctrl:WindowCloseButton x:Name="CloseButton" Margin="0" HorizontalAlignment="Right"
                                                                    Command="{Binding Path=DataContext.CloseCommand, RelativeSource={RelativeSource AncestorType=ctrl:ChildWindow}}"/>
                                        </ctrl:RightPanel>
                                    </Grid>
                                </Border>
                                <Border Grid.Row="1" x:Name="Contents" Background="{DynamicResource Background_Window}" BorderBrush="{DynamicResource Brush_ChildWindowBorder}" BorderThickness="0,1,0,0">
                                    <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                                </Border>
                            </Grid>
                        </Border>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Closed">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <DataTrigger Binding="{Binding CaptionVisible}" Value="Collapsed">
                            <Setter TargetName="PART_WindowRoot" Property="BorderThickness" Value="0" />
                            <Setter TargetName="Contents" Property="BorderThickness" Value="0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ctrl:ChildWindow" x:Key="ChildViewStyle">
        <Setter Property="MinWidth" Value="140"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="Margin" Value="-15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:ChildWindow}">
                    <Canvas x:Name="PART_Root"
                            Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=ctrl:ChildWindow}}"
                            Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=ctrl:ChildWindow}}">
                        <Rectangle Opacity="1"
                                   Width="{Binding Path=ActualWidth, ElementName=PART_Root}"
                                   Height="{Binding Path=ActualHeight, ElementName=PART_Root}"
                                   Fill="#00000000"/>
                        <!-- Used for drag -->
                        <Border x:Name="PART_WindowRoot"
                                MinWidth="{TemplateBinding MinWidth}"
                                MinHeight="{TemplateBinding MinHeight}"
                                Width="{TemplateBinding ChildWidth}"
                                Height="{TemplateBinding ChildHeight}"
                                BorderThickness="1" 
                                BorderBrush="{DynamicResource Brush_WindowBorder}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="30"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Border x:Name="Header" Background="{DynamicResource Background_Window}" CornerRadius="6 6 0 0">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <ctrl:PopupTextBlockHeader x:Name="xHeader" Foreground="{DynamicResource Brush.Black}" Text="{TemplateBinding Caption}"/>
                                        <ctrl:PopupTextBlockHeader Grid.Column="1" Margin="5,0,30,0" x:Name="PART_Header"
                                                   TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" IsTrimmingToolTip="True"
                                                   Visibility="{Binding Path=Text, RelativeSource={RelativeSource Self}, Converter={StaticResource StringEmptyToVisibilityConverter}}"
                                                   Text="{TemplateBinding Caption2}">
                                            <ctrl:PopupTextBlockHeader.Style>
                                                <Style TargetType="ctrl:PopupTextBlockHeader" BasedOn="{StaticResource PopupTextBlockHeaderStyle}">
                                                    <Style.Triggers>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="ctrl:TextBlockService.IsTextTrimmed" Value="True"/>
                                                                <Condition Property="IsTrimmingToolTip" Value="True"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="ToolTip" Value="{Binding Path=Text, RelativeSource={RelativeSource Self}}"/>
                                                        </MultiTrigger>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="ctrl:TextBlockService.IsTextTrimmed" Value="False"/>
                                                                <Condition Property="IsTrimmingToolTip" Value="True"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="ToolTip" Value="{x:Null}"/>
                                                        </MultiTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ctrl:PopupTextBlockHeader.Style>
                                            <ctrl:PopupTextBlockHeader.Width>
                                                <MultiBinding Converter="{StaticResource WidthConverter}" UpdateSourceTrigger="PropertyChanged">
                                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                    <Binding Path="." ElementName="xHeader"/>
                                                    <Binding Path="." RelativeSource="{RelativeSource Self}"/>
                                                </MultiBinding>
                                            </ctrl:PopupTextBlockHeader.Width>
                                        </ctrl:PopupTextBlockHeader>

                                        <ctrl:RightPanel Grid.ColumnSpan="2">
                                            <ctrl:WindowCloseButton x:Name="CloseButton" Margin="0" HorizontalAlignment="Right"
                                                                    Command="{Binding Path=DataContext.CloseCommand, RelativeSource={RelativeSource AncestorType=ctrl:ChildWindow}}"/>
                                        </ctrl:RightPanel>
                                    </Grid>
                                </Border>
                                <Border Grid.Row="1" x:Name="Contents" Background="{DynamicResource Background_Window}" BorderBrush="{DynamicResource Brush_ChildWindowBorder}" BorderThickness="0,1,0,0" CornerRadius="0 0 6 6">
                                    <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                                </Border>
                            </Grid>
                        </Border>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Closed">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <DataTrigger Binding="{Binding CaptionVisible}" Value="Collapsed">
                            <Setter TargetName="PART_WindowRoot" Property="BorderThickness" Value="0" />
                            <Setter TargetName="Contents" Property="BorderThickness" Value="0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion //ChildWindow-->

    <!--#region MessageBox-->
    <Style TargetType="ctrl:MessageGrid">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="10"/>
    </Style>
    <Style TargetType="ctrl:MessagePanel">
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,0,5,0"/>
    </Style>
    <Style TargetType="ctrl:MessageBorder">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
        <Setter Property="Background" Value="{DynamicResource Background_MessageBorder}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brush_MessageBorder}"/>
        <Setter Property="Height" Value="38"/>
    </Style>
    <Style TargetType="ctrl:MessageBox">
        <Setter Property="ButtonRegionBackground" Value="#FFF0F0F0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="MinWidth" Value="350" />
        <Setter Property="MinHeight" Value="130" />
        <!--<Setter Property="MaxHeight" Value="250" />-->
        <Setter Property="CommandClose" Value="{Binding Content.CommandClose, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:MessageBox}">
                    <Border BorderBrush="{DynamicResource Brush_WindowBorder}" BorderThickness="1" CornerRadius="5">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="group1">
                                <VisualState x:Name="OK">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_OkButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="OKCancel">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_OkButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_CancelButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="YesNo">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YesButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_NoButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="YesNoCancel">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YesButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_NoButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_CancelButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="LayoutRoot">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="32"/>
                                <RowDefinition Height="*" MinHeight="70"/>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <Border x:Name="Header" Background="{DynamicResource Background_Header}" CornerRadius="5,5,0,0">
                                <Grid>
                                    <ctrl:PopupTextBlockHeader Margin="10,5,1,0" Text="{TemplateBinding Caption}" />
                                </Grid>
                            </Border>
                            <Border Grid.Row="1" x:Name="Contents" Background="{DynamicResource Background_MessageBox}">
                                <ctrl:MessageGrid>
                                    <StackPanel Style="{DynamicResource HorizonPanelStyle}">
                                        <Image x:Name="MessageBoxImage" VerticalAlignment="Center" Margin="2"
                                               Source="{TemplateBinding ImageSource}" />
                                        <StackPanel Style="{DynamicResource VerticalPanelStyle}">
                                            <ContentPresenter x:Name="ContentPresenter"
                                                              Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                                              HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                                            <TextBlock x:Name="MessageText" MaxWidth="450" TextWrapping="Wrap" FontWeight="Bold" Margin="6,0,0,0" LineHeight="18"
                                                       Style="{DynamicResource PopupTextBlockStyle}"
                                                       Text="{TemplateBinding Text}"/>
                                        </StackPanel>
                                    </StackPanel>
                                </ctrl:MessageGrid>
                            </Border>
                            <ctrl:MessageBorder Grid.Row="2" x:Name="PART_Button" Visibility="Collapsed" CornerRadius="0,0,5,5">
                                <ctrl:MessagePanel>
                                    <ctrl:CommonButton Margin="5 0" x:Name="PART_YesButton" Visibility="Collapsed" Content="{TemplateBinding YesButtonContent}" Width="58"/>
                                    <ctrl:CommonButton Margin="5 0" x:Name="PART_NoButton" Visibility="Collapsed" Content="{TemplateBinding NoButtonContent}" Width="58"/>
                                    <ctrl:CommonButton Margin="5 0" x:Name="PART_OkButton" Visibility="Collapsed" Content="{TemplateBinding OkButtonContent}" Width="58"/>
                                    <ctrl:CommonButton Margin="5 0" x:Name="PART_CancelButton" Visibility="Collapsed" Content="{TemplateBinding CancelButtonContent}" IsCancel="True" MinWidth="58"/>
                                </ctrl:MessagePanel>
                            </ctrl:MessageBorder>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="ContentPresenter" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_Button" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Text" Value="{x:Null}">
                            <Setter TargetName="MessageText" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion MessageBox-->

    <!--#region MultiComboBox-->
    <Style TargetType="{x:Type ctrl:PopupMultiComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FontFamily" Value="{DynamicResource AppFont}"/>
        <Setter Property="Foreground" Value="{DynamicResource Brushes.Combo.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource Brushes.Combo.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Brushes.Combo.Border}"/>
        <Setter Property="Width" Value="{Binding Path=ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}" />
        <Setter Property="Height" Value="22"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:PopupMultiComboBox}">
                    <Grid>
                        <ToggleButton Name="toggleButton" IsTabStop="False"
                                      Background="{TemplateBinding Background}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      BorderThickness="{TemplateBinding BorderThickness}"
                                      Foreground="{TemplateBinding Foreground}"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Border BorderThickness="{TemplateBinding BorderThickness}"  
                                            Background="{TemplateBinding Background}" 
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            SnapsToDevicePixels="true" CornerRadius="2">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition />
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <ContentPresenter  Margin="4,0,5,0" Content="{Binding Path=Text, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" />
                                            <!--<TextBlock Text="{Binding Path=Text,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" Background="White" Padding="3"/>-->
                                            <Border Name="arrowBorder" Grid.Column="1" Width="16" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="1">
                                                <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="#FF525252" Data="M 0 0 L 7 0 L 3.5 4 Z" Margin="1,0,0,0" />
                                            </Border>
                                        </Grid>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="BorderBrush" TargetName="arrowBorder" Value="{DynamicResource Brushes.Combo.ButtonFocus}"/>
                                            <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource Brushes.Combo.ButtonFocus}"/>
                                        </Trigger>
                                        <Trigger Property="IsChecked" Value="true">
                                            <Setter Property="BorderBrush" TargetName="arrowBorder" Value="{DynamicResource Brushes.Combo.ButtonFocus}"/>
                                            <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource Brushes.Combo.ButtonFocus}"/>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Background" TargetName="arrowBorder" Value="{DynamicResource Brushes.Combo.PopupDisabled}"/>
                                            <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource Brushes.Combo.Disabled}"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <StackPanel Name="PART_labelContentPanel" IsHitTestVisible="False" Margin="4,0,5,0" Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        </ToggleButton>
                        <Border x:Name="border" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="2" Margin="1,1,1,0" Grid.ColumnSpan="2" CornerRadius="1,1,0,0" Background="{DynamicResource Brushes.Scroll.Background.Inner}"/>
                        <ctrl:NotTopPopup x:Name="PART_Popup" StaysOpen="True" AllowsTransparency="True" PopupAnimation="Slide"
                                          Placement="Bottom" PlacementTarget="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PopupComboBox}}}"
                                          IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}">
                            <Border Name="Shadow" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}">
                                <Border BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="*"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <ScrollViewer x:Name="DropDownScrollViewer">
                                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                    <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                                </Canvas>
                                                <ItemsPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            </Grid>
                                        </ScrollViewer>
                                        <ctrl:MessageBorder x:Name="ButtonBorder" Grid.Row="1" Height="30">
                                            <ctrl:PopupCommonButton x:Name="PART_ApplyButton" Content="{Binding LanguageApply, FallbackValue=적용, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}" Margin="0,0,4,0"/>
                                        </ctrl:MessageBorder>
                                    </Grid>
                                </Border>
                            </Border>
                        </ctrl:NotTopPopup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                            <Setter TargetName="Shadow" Property="Margin" Value="0,0,5,5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                        </Trigger>
                        <Trigger SourceName="toggleButton" Property="IsChecked" Value="True">
                        </Trigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="IsSelected" Value="{Binding Path=DataContext.IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Name="border" Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBoxItem}}, Path=ActualWidth}">
                        <Grid Margin="2,1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="20" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <CheckBox x:Name="xCheckBox" Focusable="false" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DataContext.Key, Converter={StaticResource ZeroToCollapsedConverter}}"
                                      Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}"
                                      BorderBrush="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}, Path=Foreground}"
                                      IsChecked="{Binding Path=DataContext.IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                            <ContentPresenter Grid.Column="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBoxItem}}, Path=ActualWidth}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DataContext.Value}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brushes.ComboItem.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Brushes.ComboItem.Border}"/>
                        </Trigger>
                        <!--<Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource Brushes.ComboItem.BackgroundSelect}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Brushes.ComboItem.BorderSelect}"/>
                            </Trigger>-->
                        <DataTrigger Binding="{Binding Path=IsChecked, ElementName=xCheckBox}" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource Brushes.ComboItem.Background.Select}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Brushes.ComboItem.Border.Select}"/>
                            <Setter Property="Foreground" Value="{DynamicResource Brushes.ComboItem.Foreground}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="ctrl:MultiComboBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ctrl:MultiComboBox">
                    <Border>
                        <Grid>
                            <ctrl:PopupMultiComboBox x:Name="PART_ComboBox"
                                      SnapsToDevicePixels="True"
                                      OverridesDefaultStyle="True"
                                      IsSynchronizedWithCurrentItem="True"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion //MultiComboBox-->

    <!--#region ViewPresenter-->
    <Style TargetType="view:ViewPresenter">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type view:ViewPresenter}">
                    <ContentPresenter x:Name="Root" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion //ViewPresenter-->

</ResourceDictionary>
